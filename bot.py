import os
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.enums import ParseMode
from aiogram.types import Message
from aiogram.filters import CommandStart
from aiogram.client.default import DefaultBotProperties
from dotenv import load_dotenv

from hotels import GooglePlacesHotelFinder

load_dotenv()

bot = Bot(
    token=os.getenv("TELEGRAM_TOKEN"),
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher()

finder = GooglePlacesHotelFinder()

@dp.message(CommandStart())
async def start(message: Message):
    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –∞–¥—Ä–µ—Å –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —É–ª–∏—Ü—ã, –∏ —è –Ω–∞–π–¥—É –æ—Ç–µ–ª–∏ –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏.")

@dp.message()
async def handle_address(message: Message):
    await message.answer("üîç –ò—â—É –æ—Ç–µ–ª–∏ –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏...")
    
    hotels = finder.find_nearby_hotels(message.text, radius=2000, max_results=5)
    if not hotels:
        await message.answer("üòî –û—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return

    response = f"<b>üè® –ù–∞–π–¥–µ–Ω–æ –æ—Ç–µ–ª–µ–π: {len(hotels)}</b>\n"
    for i, hotel in enumerate(hotels, 1):
        response += (
            f"\n<b>{i}. {hotel['name']}</b>\n"
            f"üìç <i>{hotel['address']}</i>\n"
            f"‚≠ê –†–µ–π—Ç–∏–Ω–≥: {hotel.get('rating', '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}\n"
            f"üí∞ –¶–µ–Ω—ã: {'$' * hotel.get('price_level', 0) if hotel.get('price_level') else '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}\n"
        )

    await message.answer(response)

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())